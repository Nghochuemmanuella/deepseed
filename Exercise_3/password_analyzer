def analyze_password(password, common_passwords):
    score = 0
    max_score = 120
    results = {}

    # Check length
    results['length'] = len(password) >= 8
    score += 20 if results['length'] else 0

    # Check uppercase
    results['uppercase'] = any(c.isupper() for c in password)
    score += 20 if results['uppercase'] else 0

    # Check lowercase
    results['lowercase'] = any(c.islower() for c in password)
    score += 20 if results['lowercase'] else 0

    # Check numbers
    results['numbers'] = any(c.isdigit() for c in password)
    score += 20 if results['numbers'] else 0

    # Check special characters
    special_chars = set("!@#$%^&*")
    results['special'] = any(c in special_chars for c in password)
    score += 20 if results['special'] else 0

    # Check common password
    results['common'] = password.lower() in common_passwords
    # Deduct points if common (0 if common; else 20)
    score += 0 if results['common'] else 20

    return score, results

def strength_level(score):
    if score <= 40:
        return "Weak"
    elif score <= 60:
        return "Fair"
    elif score <= 80:
        return "Good"
    elif score <= 100:
        return "Strong"
    else:
        return "Excellent"

def generate_suggestions(results):
    suggestions = []
    if not results['length']:
        suggestions.append("- Use at least 8 characters")
    if not results['uppercase']:
        suggestions.append("- Include uppercase letters")
    if not results['lowercase']:
        suggestions.append("- Include lowercase letters")
    if not results['numbers']:
        suggestions.append("- Include numbers")
    if not results['special']:
        suggestions.append("- Include special characters like !@#$%^&*")
    if results['common']:
        suggestions.append("- Avoid common password patterns")
        suggestions.append("- Consider using a passphrase instead")
    return suggestions

def main():
   
    common_passwords = {
        '123456', 'password', '123456789', '12345678', '12345',
        '111111', '1234567', 'sunshine', 'qwerty', 'iloveyou',
        'princess', 'admin', 'welcome', '666666', 'abc123',
        'football', '123123', 'monkey', '654321', '!@#$%^&*',
        'charlie', 'aa123456', 'donald', 'password1'
    }

    print("=== PASSWORD SECURITY ANALYZER ===")
    pwd = input("Enter password to analyze: ").strip()

    score, results = analyze_password(pwd, common_passwords)
    level = strength_level(score)

    print("\n🔒 SECURITY ANALYSIS RESULTS")
    print(f"Password: {pwd}")
    print(f"Score: {score}/{120} ({level})\n")

    checks = [
        ("Length requirement (8+ chars)", results['length']),
        ("Contains uppercase letters", results['uppercase']),
        ("Contains lowercase letters", results['lowercase']),
        ("Contains numbers", results['numbers']),
        ("Contains special characters", results['special']),
        ("Common password detected", not results['common']),
    ]

    for desc, passed in checks:
        mark = "✅" if passed else "❌"
        print(f"{mark} {desc}")

    suggestions = generate_suggestions(results)
    if suggestions:
        print("\n💡 SUGGESTIONS:")
        for s in suggestions:
            print(s)
    else:
        print("\n🎉 Your password is strong. No suggestions needed!")

if __name__ == "__main__":
    main()
